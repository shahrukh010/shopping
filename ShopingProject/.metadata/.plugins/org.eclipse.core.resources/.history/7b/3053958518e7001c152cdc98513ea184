package com.shopme.admin.security;

import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableAutoConfiguration
public class WebSecurityConfigure extends WebSecurityConfigurerAdapter {

	@Bean
	public UserDetailsService userDetailsService() {
		return new ShopmeUserDetailsService();
	}
	
	
	

	@Bean
	public DaoAuthenticationProvider authenticationProvider() {

		DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
		authenticationProvider.setUserDetailsService(userDetailsService());
		authenticationProvider.setPasswordEncoder(passwordEncoder());
		return authenticationProvider;
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {

		auth.authenticationProvider(authenticationProvider());
	}

	@Bean
	public PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();
	}
//remember works when your userDetailsService() name must be same not userDetailSerice()?please do care you spend 1hr to fix this issue

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http.authorizeRequests().antMatchers("/users/**").hasAuthority("Admin").anyRequest().
		authenticated().and().formLogin().
		loginPage("/login").usernameParameter("email").permitAll().
				and().logout().permitAll().and().rememberMe()
				.key(java.util.UUID.randomUUID().toString());// by default 1 weak maintain remember token you can see
																// in cookies remember identifier close browser then
																// again open browser and login shopmeAdmin you will see
																// not asked for credentials,because of remember me
																// maintain cookies token for some times.
		
		/**
		 * remember me features:suppose use session end or browser exit 
		 * so for user browser should remember user credentials for users.
		 * Remember login implementation in spring security.
		 * Hash based token(cookies)fast but less seccure
		 * Persistent Token(cookies and databases)slow but secure
		 */
		
	}

	@Override
	public void configure(WebSecurity web) throws Exception {

		web.ignoring().antMatchers("/images/**", "/js/**", "/webjars/**");
	}
	
//	@Override
//	public void configure(WebSecurity web) {
//		
//		web.ignoring().antMatchers("/**");
//		
//	}

}
